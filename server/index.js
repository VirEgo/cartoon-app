require('dotenv').config();
const User = require('./models/User');
const express = require('express');
const axios = require('axios');
const cors = require('cors');
const { Telegraf } = require('telegraf');
const mongoose = require('mongoose');

const app = express();
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

app.use(cors());
mongoose
	.connect(process.env.MONGO_URI)
	.then(() => {
		console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
	})
	.catch((err) => {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
	});

const ADMIN_ID = process.env.ADMIN_ID;
const PORT = process.env.PORT || 3001;
const TMDB_URL = 'https://api.themoviedb.org/3/discover/movie';

function getMainKeyboard() {
	return {
		keyboard: [
			['üé≤ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º'],
			['‚ÑπÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ'],
			['‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –∏–º—è', 'üìÖ –°–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç'],
			['üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë'],
		],
		resize_keyboard: true,
	};
}

async function fetchRandomCartoon(age = 5, seenIds = [], dislikedIds = []) {
	const randomPage = Math.floor(Math.random() * 5) + 1;
	const res = await axios.get(TMDB_URL, {
		params: {
			api_key: process.env.TMDB_API_KEY,
			with_genres: 16,
			language: 'ru',
			include_adult: false,
			'vote_average.gte': 6, // –∏—Å–∫–ª—é—á–∏–º –ø–ª–æ—Ö–∏–µ –º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã
			region: 'UA',
			page: randomPage,
			certification_country: 'UA',
			'certification.lte': 'G',
		},
	});

	const all = res.data.results;
	const filtered = all.filter(
		(c) => !seenIds.includes(c.id) && !dislikedIds.includes(c.id),
	);

	const usable = filtered.length ? filtered : all;
	// –í—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º
	const random = usable[Math.floor(Math.random() * usable.length)];

	return random;
}

function generateButtons(user, cartoon) {
	const alreadyLiked = user.likedCartoonIds?.includes(cartoon.id);
	const alreadyInFav = user.favoriteCartoonIds?.includes(cartoon.id);
	return {
		inline_keyboard: [
			[
				{
					text: '‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è',
					callback_data: `like_${cartoon.id}`,
					// –æ—Ç–∫–ª—é—á–∏–º, –µ—Å–ª–∏ —É–∂–µ –ª–∞–π–∫
					...(alreadyLiked && {
						callback_data: 'already_liked',
						text: '‚ù§Ô∏è –£–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è',
						disabled: true,
					}),
				},
				{
					text: 'üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è',
					callback_data: `dislike_${cartoon.id}`,
					...(alreadyInFav && {
						callback_data: 'already_liked',
						text: 'üëé –£–∂–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è',
						disabled: true,
					}),
				},
			],
			[{ text: '‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data: `fav_${cartoon.id}` }],
		],
	};
}

// API –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
app.get('/api/random-cartoon', async (req, res) => {
	try {
		const cartoon = await fetchRandomCartoon();
		res.json(cartoon);
	} catch (err) {
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞' });
	}
});

// Telegram –ª–æ–≥–∏–∫–∞
bot.start(async (ctx) => {
	const chatId = ctx.chat.id;
	let user = await User.findOne({ telegramId: chatId });

	if (!user) {
		user = new User({
			telegramId: chatId,
			step: 'ask_name',
		});
		await user.save();
		ctx.reply('–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —Ç–µ–±–µ –º—É–ª—å—Ç—Ñ–∏–ª—å–º.\n–ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞?');
		return;
	}

	if (!user.name || !user.age) {
		user.step = 'ask_name';
		await user.save();
		ctx.reply('–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞?');
		return;
	}
	user.step = 'done';
	await user.save();
	ctx.reply(`–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, ${user.name}! –ì–æ—Ç–æ–≤ –ø–æ–¥–æ–±—Ä–∞—Ç—å –º—É–ª—å—Ç—Ñ–∏–ª—å–º?`, {
		reply_markup: getMainKeyboard(),
	});
});

bot.command('approve', async (ctx) => {
	if (parseInt(ctx.from.id) !== parseInt(ADMIN_ID)) return;

	const args = ctx.message.text.split(' ');
	const targetId = parseInt(args[1]);
	if (!targetId) return ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å Telegram ID');

	const user = await User.findOne({ telegramId: targetId });
	if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

	user.requestCount = 0;
	user.lastResetAt = new Date();
	await user.save();

	await ctx.reply(`‚úÖ –õ–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è ${targetId}`);
	await bot.telegram.sendMessage(
		targetId,
		'üéâ –¢–≤–æ–π –ª–∏–º–∏—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ú–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –∏—Å–∫–∞—Ç—å –º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã!',
	);
});

bot.command('unlimit', async (ctx) => {
	if (parseInt(ctx.from.id) !== parseInt(ADMIN_ID)) return;

	const args = ctx.message.text.split(' ');
	const targetId = parseInt(args[1]);
	if (!targetId) return ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å Telegram ID');

	const user = await User.findOne({ telegramId: targetId });
	if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

	user.isUnlimited = true;
	await user.save();

	await ctx.reply(`‚ôæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetId} —Ç–µ–ø–µ—Ä—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π`);
});

bot.command('limit', async (ctx) => {
	if (parseInt(ctx.from.id) !== parseInt(ADMIN_ID)) return;

	const args = ctx.message.text.split(' ');
	const targetId = parseInt(args[1]);
	if (!targetId) return ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å Telegram ID');

	const user = await User.findOne({ telegramId: targetId });
	if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

	user.isUnlimited = false;
	await user.save();

	await ctx.reply(`‚õîÔ∏è –£–±—Ä–∞–Ω –±–µ–∑–ª–∏–º–∏—Ç —É ${targetId}`);
});

bot.command('get', async (ctx) => {
	if (parseInt(ctx.from.id) !== parseInt(ADMIN_ID)) return;

	const args = ctx.message.text.split(' ');
	const targetId = parseInt(args[1]);
	if (!targetId) return ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å Telegram ID');

	const user = await User.findOne({ telegramId: targetId });
	if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

	await ctx.reply(
		`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${user.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${targetId})\n` +
			`–ò–º—è: ${user.name || '-'}\n–í–æ–∑—Ä–∞—Å—Ç: ${user.age || '-'}\n` +
			`–ó–∞–ø—Ä–æ—Å–æ–≤: ${user.requestCount}/10\n` +
			`–ë–µ–∑–ª–∏–º–∏—Ç: ${user.isUnlimited ? '–î–∞' : '–ù–µ—Ç'}`,
	);
});

bot.on('text', async (ctx) => {
	const chatId = ctx.chat.id;
	let user = await User.findOne({ telegramId: chatId });
	if (!user) {
		user = new User({ telegramId: chatId });
		await user.save();
	}

	const text = ctx.message.text;

	if (text === '‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –∏–º—è') {
		user.step = 'ask_name';
		ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:', {
			reply_markup: {
				remove_keyboard: true,
			},
		});
		await user.save();
		return;
	}
	if (text === 'üìÖ –°–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç') {
		user.step = 'ask_age';
		ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:', {
			reply_markup: {
				remove_keyboard: true,
			},
		});
		await user.save();
		return;
	}
	if (text === 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë') {
		user.name = null;
		user.age = null;
		user.seenCartoonIds = [];
		user.step = 'ask_name';
		await user.save();
		ctx.reply('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞?');
		return;
	}
	if (text === '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ') {
		if (!user.favoriteCartoonIds || user.favoriteCartoonIds.length === 0) {
			ctx.reply('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤.');
			return;
		}
		try {
			const details = await Promise.all(
				user.favoriteCartoonIds.map((id) =>
					axios
						.get(`https://api.themoviedb.org/3/movie/${id}`, {
							params: {
								api_key: process.env.TMDB_API_KEY,
								language: 'ru',
							},
						})
						.then((res) => res.data)
						.catch(() => null),
				),
			);

			const valid = details.filter(Boolean);
			if (!valid.length) {
				ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.');
				return;
			}

			const media = valid.slice(0, 10).map((c) => ({
				type: 'photo',
				media: `https://image.tmdb.org/t/p/w500${c.poster_path}`,
				caption: `${c.title}\n\n${c.overview?.slice(0, 150)}...`,
			}));

			await ctx.replyWithMediaGroup(media);
		} catch (e) {
			console.error(e);
			ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.');
		}
		return;
	}
	if (text === '‚ÑπÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å') {
		ctx.reply(
			`üë∂ –ò–º—è: ${user.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: ${
				user.age || '–Ω–µ —É–∫–∞–∑–∞–Ω'
			}`,
		);
		return;
	}
	if (text === 'üé≤ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º') {
		if (user.step !== 'done') {
			ctx.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É. –í–≤–µ–¥–∏ /start.');
			return;
		}
		if (!user.isUnlimited) {
			const now = new Date();
			const resetTime = 12 * 60 * 60 * 1000; // 12 —á–∞—Å–æ–≤ –≤ –º—Å
			if (!user.lastResetAt) {
				user.lastResetAt = now;
				user.requestCount = 0;
			}

			const timeSinceReset = now - user.lastResetAt;
			if (timeSinceReset > resetTime) {
				user.lastResetAt = now;
				user.requestCount = 0;
				await user.save();

				await ctx.reply('üéâ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –ü–æ–∏—Å–∫ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.');
			}

			if (user.requestCount === 8) {
				await ctx.reply(
					'‚ö†Ô∏è –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å 2 –ø–æ–ø—ã—Ç–∫–∏. –ü–æ—Ç–æ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å 12 —á–∞—Å–æ–≤.',
				);
			}

			if (user.requestCount >= 10) {
				const msLeft = resetTime - timeSinceReset;
				const hours = Math.floor(msLeft / (1000 * 60 * 60));
				const minutes = Math.floor((msLeft % (1000 * 60 * 60)) / (1000 * 60));
				const seconds = Math.floor((msLeft % (1000 * 60)) / 1000);

				return ctx.reply(
					`‚è≥ –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç. –°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ ${hours}—á ${minutes}–º.`,
					{
						reply_markup: {
							inline_keyboard: [
								[{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: 'check_limit' }],
							],
						},
					},
				);
			}
			// —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
			user.requestCount++;
			await user.save();
		}

		const age = Math.min(user.age + 2, 8);
		const seen = user.seenCartoonIds || [];
		const disliked = user.dislikedCartoonIds || [];

		try {
			const cartoon = await fetchRandomCartoon(age, seen, disliked);

			if (!cartoon) {
				await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º.');
				return;
			}

			if (!seen.includes(cartoon.id)) {
				seen.push(cartoon.id);
				await user.updateOne({ seenCartoonIds: seen });
			}

			await user.updateOne({ seenCartoonIds: seen });
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–µ—Ä–∞
			const photoUrl = cartoon.poster_path
				? `https://image.tmdb.org/t/p/w500${cartoon.poster_path}`
				: null;

			const caption = `<b>${cartoon.title}</b>\n\n –†–µ–π—Ç–∏–Ω–≥: <b>${cartoon.vote_average}</b>\n\n ${cartoon.overview}\n\n <a href="https://www.themoviedb.org/movie/${cartoon.id}">TMDB</a>\n\n –°—Ç—Ä–∞–Ω–∞: <b>${cartoon.original_language}</b>\n\n –ì–æ–¥: <b>${cartoon.release_date}`;

			if (photoUrl) {
				await ctx.replyWithPhoto(photoUrl, {
					caption,
					parse_mode: 'HTML',
					reply_markup: generateButtons(user, cartoon),
				});
			} else {
				await ctx.reply(caption, {
					parse_mode: 'HTML',
					reply_markup: generateButtons(user, cartoon),
				});
			}
		} catch (err) {
			console.error(err);
			ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤.');
		}

		return;
	}
	if (user.step === 'ask_name' || user.step === 'ask_age') {
		// –ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
		if (user.step === 'ask_name') {
			user.name = text;
			user.step = 'ask_age';
			await user.save();
			ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${user.name}! –°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ä–µ–±—ë–Ω–∫—É?`);
			return;
		}

		if (user.step === 'ask_age') {
			const age = parseInt(text);
			if (isNaN(age) || age < 1 || age > 12) {
				ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 12.');
				return;
			}

			user.age = age;
			user.step = 'done';
			await user.save();

			await ctx.reply(
				`‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${age}\n\n‚¨áÔ∏è –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ:`,
				{
					reply_markup: getMainKeyboard(),
				},
			);
			return;
		}
	}

	ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start.');
});

bot.on('callback_query', async (ctx) => {
	const chatId = ctx.from.id;
	const user = await User.findOne({ telegramId: chatId });
	const data = ctx.callbackQuery.data;
	console.log(chatId, ADMIN_ID, ctx.callbackQuery.data);
	if (!user) return ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

	if (data.startsWith('admin_')) {
		if (parseInt(chatId) !== parseInt(ADMIN_ID))
			return ctx.answerCbQuery(`–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è ${chatId}, admin: ${ADMIN_ID}`);

		const [_, action, targetIdStr] = data.split('_');
		const targetId = parseInt(targetIdStr);
		const targetUser = await User.findOne({ telegramId: targetId });

		if (!targetUser) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

		if (action === 'approve') {
			targetUser.requestCount = 0;
			targetUser.lastResetAt = new Date();
			await targetUser.save();

			await ctx.editMessageText(`‚úÖ –õ–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è ${targetId}`);
			await bot.telegram.sendMessage(
				targetId,
				'üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–∏–ª —Ç–≤–æ–π –ª–∏–º–∏—Ç. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!',
			);

			await ctx.answerCbQuery(); // –ó–∞–∫—Ä—ã—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
		}

		if (action === 'unlimit') {
			targetUser.isUnlimited = true;
			await targetUser.save();
			await ctx.reply(`‚ôæ –ë–µ–∑–ª–∏–º–∏—Ç –≤–∫–ª—é—á–µ–Ω –¥–ª—è ${targetId}`);
			await bot.telegram.sendMessage(
				targetId,
				'‚ú® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–ª —Ç–µ–±–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø!',
			);
		}

		if (action === 'limit') {
			targetUser.isUnlimited = false;
			await targetUser.save();
			await ctx.reply(`‚õîÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è ${targetId}`);
			await bot.telegram.sendMessage(
				targetId,
				'‚õîÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á—ë–Ω.',
			);
		}

		if (action === 'get') {
			await ctx.reply(
				`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${targetUser.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${targetId})
				–ò–º—è: ${targetUser.name || '-'}
				–í–æ–∑—Ä–∞—Å—Ç: ${targetUser.age || '-'}
				–ó–∞–ø—Ä–æ—Å–æ–≤: ${targetUser.requestCount}/10
				–ë–µ–∑–ª–∏–º–∏—Ç: ${targetUser.isUnlimited ? '–î–∞' : '–ù–µ—Ç'}`,
			);
		}
		return;
	}

	if (data.startsWith('like_')) {
		const id = parseInt(data.split('_')[1]);
		if (!user.likedCartoonIds.includes(id)) {
			user.likedCartoonIds.push(id);
			user.seenCartoonIds.push(id);
			await user.save();
			return ctx.answerCbQuery('‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è!');
		} else {
			return ctx.answerCbQuery('–£–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è!');
		}
	}

	if (data.startsWith('dislike_')) {
		const id = parseInt(data.split('_')[1]);
		if (!user.dislikedCartoonIds.includes(id)) {
			user.dislikedCartoonIds.push(id);
			user.seenCartoonIds.push(id);
			await user.save();
			return ctx.answerCbQuery('üëé –ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∂–µ–º!');
		} else {
			return ctx.answerCbQuery('–£–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π.');
		}
	}

	if (data.startsWith('fav_')) {
		const id = parseInt(data.split('_')[1]);
		if (!user.favoriteCartoonIds.includes(id)) {
			user.favoriteCartoonIds.push(id);
			await user.save();
			return ctx.answerCbQuery('‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');
		} else {
			return ctx.answerCbQuery('–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!');
		}
	}

	if (data === 'already_liked') {
		return ctx.answerCbQuery('–£–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è ‚ù§Ô∏è');
	}
	if (data === 'check_limit') {
		const user = await User.findOne({ telegramId: ctx.from.id });
		const now = new Date();
		const resetTime = 12 * 60 * 60 * 1000;
		const timeSinceReset = now - user.lastResetAt;

		if (timeSinceReset > resetTime) {
			user.requestCount = 0;
			user.lastResetAt = now;
			await user.save();

			return ctx.editMessageText('üéâ –õ–∏–º–∏—Ç –æ–±–Ω—É–ª—ë–Ω! –ü–æ–∏—Å–∫ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.');
		} else {
			const msLeft = resetTime - timeSinceReset;
			const hours = Math.floor(msLeft / (1000 * 60 * 60));
			const minutes = Math.floor((msLeft % (1000 * 60 * 60)) / (1000 * 60));

			const newText = `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å ${hours}—á ${minutes}–º`;

			// –ø—Ä–æ–≤–µ—Ä–∏–º: —É–∂–µ –ª–∏ —Ç–∞–∫–æ–π —Ç–µ–∫—Å—Ç?
			if (
				ctx.message?.text === newText ||
				ctx.update?.callback_query?.message?.text === newText
			) {
				return ctx.answerCbQuery('‚è≥ –í—Ä–µ–º—è –µ—â—ë –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å');
			}

			return ctx.editMessageText(newText, {
				reply_markup: {
					inline_keyboard: [
						[{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'check_limit' }],
						[
							{
								text: 'üì© –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞',
								callback_data: 'request_more',
							},
						],
					],
				},
			});
		}
	}

	if (data === 'request_more') {
		const user = await User.findOne({ telegramId: ctx.from.id });

		const msg = `üì¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from.username || '–ë–µ–∑ –Ω–∏–∫–∞'} 
		(${ctx.from.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞.
		
			–ò–º—è —Ä–µ–±—ë–Ω–∫–∞: ${user.name || '‚Äî'}
			–í–æ–∑—Ä–∞—Å—Ç: ${user.age || '‚Äî'}
			–¢–µ–∫—É—â–µ–µ: ${user.requestCount}/10`;

		await ctx.answerCbQuery('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
		await ctx.reply('–ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å!');

		await bot.telegram.sendMessage(ADMIN_ID, msg, {
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: '‚úÖ Approve',
							callback_data: `admin_approve_${ctx.from.id}`,
						},
						{
							text: '‚ôæ Unlimit',
							callback_data: `admin_unlimit_${ctx.from.id}`,
						},
					],
					[
						{ text: '‚õîÔ∏è Limit', callback_data: `admin_limit_${ctx.from.id}` },
						{ text: '‚ÑπÔ∏è Get Info', callback_data: `admin_get_${ctx.from.id}` },
					],
				],
			},
		});
	}
});

bot.telegram.setWebhook(`${process.env.RENDER_EXTERNAL_URL}/webhook`);
app.use(bot.webhookCallback('/webhook'));

app.get('/', (req, res) => {
	res.send('Bot is running...');
});

app.listen(PORT, () => {
	console.log(`üöÄ Server listening on port ${PORT}`);
});
