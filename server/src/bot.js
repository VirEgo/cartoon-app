const { Telegraf, Markup, session, Scenes } = require('telegraf');
const sceneList = require('./telegramTools/scenes/movieSettingsScenes');
const userProfileScenes = require('./telegramTools/scenes/userProfileScenes');
const {
	initializeAdminCommands,
	initializeAdminCallbacks,
} = require('./telegramTools/adminCommandsConfig/commandConfig');
const stage = new Scenes.Stage([...sceneList, ...userProfileScenes]);

const {
	TELEGRAM_BOT_TOKEN,
	ADMIN_ID,
	REQUEST_LIMIT,
	LIMIT_RESET_INTERVAL_MS,
	PAYMENT_PROVIDER_TOKEN,
} = require('./config/config');
const {
	findOrCreateUser,
	resetRequestLimit,
	toggleUnlimitedAccess,
	getUserInfo,
	addLikedCartoon,
	addDislikedCartoon,
	toggleFavoriteCartoon,
	resetUserData,
} = require('./services/user');

const {
	fetchRandomCartoonImproved,
	getCartoonDetails,
	getPosterUrl,
} = require('./services/tmdb');

const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

const paymentKeyboard = Markup.inlineKeyboard([
	Markup.button.pay('1 –º—É–ª—å—Ç—Ñ–∏–ª—å–º –∑–∞ 5 ‚≠êÔ∏è'),
]);

const userActionTimestamps = new Map();

function limitUserActions({
	generalLimitMs = 5 * 60 * 1000,
	cartoonLimitMs = 3000,
} = {}) {
	return async (ctx, next) => {
		const userId = ctx.from?.id;
		if (!userId) return next();

		const now = Date.now();
		const text = ctx.message?.text?.trim();
		const isCartoonRequest =
			text === 'üé≤ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º' ||
			text === '/random' ||
			ctx.callbackQuery?.data === 'random';

		// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–∞–π–º—Å—Ç–µ–º–ø—ã –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
		const lastTimes = userActionTimestamps.get(userId) || {
			general: 0,
			cartoon: 0,
		};

		// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
		const sendRateLimitNotice = (message) => {
			if (ctx.callbackQuery) {
				return ctx.answerCbQuery(message, { show_alert: false });
			} else {
				return ctx.reply(message);
			}
		};

		if (isCartoonRequest) {
			console.log(lastTimes, 'Last times:');

			if (now - lastTimes.cartoon < cartoonLimitMs) {
				await sendRateLimitNotice(
					'–ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–º.',
				);
				return;
			}
			lastTimes.cartoon = now;
		} else {
			if (now - lastTimes.general < generalLimitMs) {
				await sendRateLimitNotice('–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º.');
				return;
			}
			lastTimes.general = now;
		}

		userActionTimestamps.set(userId, lastTimes);
		await next();
	};
}

// bot.use(limitUserActions());
bot.use(async (ctx, next) => {
	const chatId = ctx.chat?.id || ctx.from?.id;
	const username = ctx.from?.username;
	if (chatId) {
		ctx.state.user = await findOrCreateUser(chatId, username);
	}
	console.log(
		`ü§ñ ${new Date().toISOString()} User ${chatId} (${
			username || 'no_username'
		}) - ${ctx.message?.text || ctx.callbackQuery?.data}`,
	);
	await next();
});

bot.use(session());
bot.use(stage.middleware());

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns {object} - –û–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã Telegraf.
 */
function getMainKeyboard() {
	return Markup.keyboard([
		['üé≤ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º'],
		['‚ÑπÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ'],
		// ['‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –∏–º—è', 'üìÖ –°–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç'],
		// ['üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë'],
	]).resize();
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞.
 * @param {object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {object} cartoon - –û–±—ä–µ–∫—Ç –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞.
 * @returns {object} - –û–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã Telegraf.
 */
function generateCartoonButtons(user, cartoon) {
	const alreadyLiked = user.likedCartoonIds?.includes(cartoon.id);
	const alreadyInFav = user.favoriteCartoonIds?.includes(cartoon.id);
	const alreadyDisliked = user.dislikedCartoonIds?.includes(cartoon.id);

	const likeButton = alreadyLiked
		? Markup.button.callback('–£–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', 'already_liked')
		: Markup.button.callback('–ù—Ä–∞–≤–∏—Ç—Å—è', `like_${cartoon.id}`);

	const dislikeButton = alreadyDisliked
		? Markup.button.callback('–£–±—Ä–∞—Ç—å –¥–∏–∑–ª–∞–π–∫', 'already_disliked')
		: Markup.button.callback('–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', `dislike_${cartoon.id}`);

	const favButton = Markup.button.callback(
		alreadyInFav ? '–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
		`togglefav_${cartoon.id}`,
	);

	return Markup.inlineKeyboard([[likeButton, dislikeButton], [favButton]])
		.reply_markup;
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
bot.start(async (ctx) => {
	const user = ctx.state.user;

	if (!user.name || !user.age) {
		user.step = 'ask_name';
		await user.save();
		ctx.reply('–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —Ç–µ–±–µ –º—É–ª—å—Ç—Ñ–∏–ª—å–º.\n–ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞?');
		return;
	}

	user.step = 'done';
	await user.save();
	ctx.reply(
		`–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, ${user.name}! –ì–æ—Ç–æ–≤ –ø–æ–¥–æ–±—Ä–∞—Ç—å –º—É–ª—å—Ç—Ñ–∏–ª—å–º?`,
		getMainKeyboard(),
	);
});

// –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
initializeAdminCommands(bot);

bot.command('age', async (ctx) => {
	return ctx.scene.enter('userAgeScene');
});

bot.action('change_rating', async (ctx) => {
	await ctx.answerCbQuery();
	return ctx.scene.enter('ratingScene');
});

/// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
bot.on('text', async (ctx) => {
	const user = ctx.state.user;
	const text = ctx.message.text;

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	switch (text) {
		case '‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –∏–º—è':
			user.step = 'ask_name';
			await user.save();
			ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:', Markup.removeKeyboard());
			return;
		case 'üìÖ –°–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç':
			user.step = 'ask_age';
			await user.save();
			ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:', Markup.removeKeyboard());
			return;
		case 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë':
			await resetUserData(user.telegramId);
			ctx.reply('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞?');
			return;
		case '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
			if (!user.favoriteCartoonIds || user.favoriteCartoonIds.length === 0) {
				ctx.reply('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤.');
				return;
			}
			try {
				// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
				const details = await Promise.all(
					user.favoriteCartoonIds.map((id) => getCartoonDetails(id)),
				);

				const valid = details.filter(Boolean); // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
				if (!valid.length) {
					ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.');
					return;
				}

				// –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–µ—Ä–æ–≤
				const media = valid.slice(0, 10).map((c) => ({
					type: 'photo',
					media:
						getPosterUrl(c.poster_path) ||
						'https://placehold.co/500x750/000000/FFFFFF?text=No+Poster', // –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ—Å—Ç–µ—Ä–∞
					caption: `<b>${c.title}</b>\n\n${
						c.overview?.slice(0, 200) || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
					}...`, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
					parse_mode: 'HTML',
				}));

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
				try {
					await ctx.replyWithMediaGroup(media);
				} catch (e) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã:', e.message);
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É, –µ—Å–ª–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–æ—Ç–æ)
					for (const item of media) {
						await ctx.replyWithPhoto(item.media, {
							caption: item.caption,
							parse_mode: 'HTML',
						});
					}
				}
			} catch (e) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', e);
				ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.');
			}
			return;
		case '‚ÑπÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
			ctx.reply(
				`üë∂ –ò–º—è: ${user.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: ${
					user.age || '–Ω–µ —É–∫–∞–∑–∞–Ω'
				}`,
			);
			return;
		case 'üé≤ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º':
			if (user.step !== 'done') {
				ctx.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É. –í–≤–µ–¥–∏ /start.');
				return;
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
			if (!user.isUnlimited) {
				const now = new Date();
				const timeSinceLastReset = now - new Date(user.lastResetAt);

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 12 —á–∞—Å–æ–≤
				if (timeSinceLastReset > LIMIT_RESET_INTERVAL_MS) {
					user.requestCount = 0;
					user.lastResetAt = now;
					await user.save();
					await ctx.reply('üéâ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –ü–æ–∏—Å–∫ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.');
				}

				if (user.requestCount >= REQUEST_LIMIT) {
					const msLeft = LIMIT_RESET_INTERVAL_MS - timeSinceLastReset;
					const hours = Math.floor(msLeft / (1000 * 60 * 60));
					const minutes = Math.floor((msLeft % (1000 * 60 * 60)) / (1000 * 60));

					return ctx.reply(
						`‚è≥ –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç. –°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ ${hours}—á ${minutes}–º.`,
						Markup.inlineKeyboard([
							Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', 'check_limit'),
							Markup.button.callback(
								'üì© –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞',
								'request_more',
							),
						]),
					);
				}
			}

			// –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º
			try {
				const cartoon = await fetchRandomCartoonImproved(
					user.age,
					user.seenCartoonIds,
					user.dislikedCartoonIds,
					user.movieFilter.minVoteAverage,
				);

				if (!cartoon) {
					await ctx.reply(
						`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª–∏.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –±–æ–ª—å—à–µ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤.\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.`,
						Markup.inlineKeyboard([
							Markup.button.callback(
								'–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏–∫–∞',
								'change_params',
							),
							// Markup.button.callback(
							// 	'üì© –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞',
							// 	'request_more',
							// ),
						]),
					);
					return;
				}

				// –î–æ–±–∞–≤–ª—è–µ–º –º—É–ª—å—Ç—Ñ–∏–ª—å–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç)
				if (!user.seenCartoonIds.includes(cartoon.id)) {
					user.seenCartoonIds.push(cartoon.id);
					await user.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ seen
				}

				const photoUrl = getPosterUrl(cartoon.poster_path);
				const caption = `<b>${cartoon.title}</b>\n–†–µ–π—Ç–∏–Ω–≥: <i>${
					cartoon.vote_average?.toFixed(1) || '-'
				}</i>\n\n${
					cartoon.overview?.slice(0, 250) || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
				}...`;

				const replyMarkup = generateCartoonButtons(user, cartoon);
				if (photoUrl) {
					try {
						await ctx.replyWithPhoto(photoUrl, {
							caption,
							parse_mode: 'HTML',
							reply_markup: replyMarkup,
						});
					} catch (e) {
						console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', e.message);
						await ctx.reply(caption, {
							parse_mode: 'HTML',
							reply_markup: replyMarkup,
						});
					}
				} else {
					// –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–µ—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
					await ctx.reply(caption, {
						parse_mode: 'HTML',
						reply_markup: replyMarkup,
					});
				}

				// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±–µ–∑–ª–∏–º–∏—Ç)
				if (!user.isUnlimited) {
					user.requestCount++;
					await user.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
				}
			} catch (err) {
				console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞:', err);
				await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞.');
			}
			return;
		default:
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			if (user.step === 'ask_name') {
				user.name = text.trim();
				user.step = 'ask_age';
				await user.save();
				ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${user.name}! –°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ä–µ–±—ë–Ω–∫—É?`);
				return;
			}

			if (user.step === 'ask_age') {
				const age = parseInt(text.trim());
				if (isNaN(age) || age < 1 || age > 12) {
					ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 12.');
					return;
				}

				user.age = age;
				user.step = 'done';
				await user.save();

				await ctx.reply(
					`‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${age}\n\n‚¨áÔ∏è –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ:`,
					getMainKeyboard(),
				);
				return;
			}

			// –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ —à–∞–≥–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–ª–∞
			ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start.');
			break;
	}
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback query ---
bot.on('callback_query', async (ctx) => {
	const user = ctx.state.user;
	const data = ctx.callbackQuery.data;

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –¥–ª—è –∞–¥–º–∏–Ω–∞
	await initializeAdminCallbacks(bot);

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –¥–ª—è –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤
	if (data.startsWith('like_')) {
		const id = parseInt(data.split('_')[1]);
		if (isNaN(id)) return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞.');

		const updatedUser = await addLikedCartoon(user.telegramId, id);
		if (updatedUser) {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º—É–ª—å—Ç—Ñ–∏–ª—å–º —É–∂–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è
			try {
				await ctx.editMessageReplyMarkup(
					generateCartoonButtons(updatedUser, { id }),
				);
				await ctx.answerCbQuery('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è');
			} catch (e) {
				console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ª–∞–π–∫–∞:', e.message);
				// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)
			}
		} else {
			// –ï—Å–ª–∏ updatedUser null, –∑–Ω–∞—á–∏—Ç –º—É–ª—å—Ç—Ñ–∏–ª—å–º —É–∂–µ –±—ã–ª –≤ likedCartoonIds
			ctx.reply('–£–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è!');
		}
		return;
	}

	if (data.startsWith('dislike_')) {
		const id = parseInt(data.split('_')[1]);
		if (isNaN(id)) return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞.');

		const updatedUser = await addDislikedCartoon(user.telegramId, id);
		if (updatedUser) {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
			try {
				await ctx.editMessageReplyMarkup(
					generateCartoonButtons(updatedUser, { id }),
				);
			} catch (e) {
				console.warn(
					'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –¥–∏–∑–ª–∞–π–∫–∞:',
					e.message,
				);
			}
		} else {
			ctx.reply('–£–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π.');
		}
		return;
	}

	if (data.startsWith('togglefav_')) {
		const id = parseInt(data.split('_')[1]);
		if (isNaN(id)) return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞.');

		const { user: updatedUser, added } = await toggleFavoriteCartoon(
			user.telegramId,
			id,
		);
		if (updatedUser) {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
			try {
				await ctx.editMessageReplyMarkup(
					generateCartoonButtons(updatedUser, { id }),
				);
			} catch (e) {
				console.warn(
					'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:',
					e.message,
				);
			}
			ctx.reply(
				added ? '‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!' : '‚≠ê –£–±—Ä–∞–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!',
			);
		} else {
			ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.');
		}
		return;
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback query
	switch (data) {
		case 'already_liked':
			await ctx.answerCbQuery('–§–∏–ª—å–º —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º ‚ù§Ô∏è', {
				show_alert: true,
			});
			break;
		case 'already_disliked':
			await ctx.answerCbQuery('–§–∏–ª—å–º —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ üëé', {
				show_alert: true,
			});
			break;
		case 'check_limit':
			const now = new Date();
			const timeSinceLastReset = now - new Date(user.lastResetAt);

			if (timeSinceLastReset > LIMIT_RESET_INTERVAL_MS) {
				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				await resetRequestLimit(user.telegramId);
				await ctx.editMessageText('üéâ –õ–∏–º–∏—Ç –æ–±–Ω—É–ª—ë–Ω! –ü–æ–∏—Å–∫ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.');
			} else {
				const msLeft = LIMIT_RESET_INTERVAL_MS - timeSinceLastReset;
				const hours = Math.floor(msLeft / (1000 * 60 * 60));
				const minutes = Math.floor((msLeft % (1000 * 60 * 60)) / (1000 * 60));

				const newText = `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å ${hours}—á ${minutes}–º`;

				const keyboard = Markup.inlineKeyboard([
					[Markup.button.callback('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', 'check_limit')],
					[
						Markup.button.callback(
							'–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞',
							'request_more',
						),
					],
					[Markup.button.callback('üé∞ 1 –º—É–ª—å—Ç—Ñ–∏–ª—å–º –∑–∞ 5 ‚≠êÔ∏è', 'buy_spin')],
				]);

				if (ctx.callbackQuery.message?.text !== newText) {
					await ctx.editMessageText(newText, keyboard);
				} else {
					// –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
					ctx.answerCbQuery('–í—Ä–µ–º—è –µ—â—ë –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å');
				}
			}
			break;
		case 'request_more':
			if (isNaN(ADMIN_ID)) {
				ctx.reply(
					'–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ADMIN_ID).',
				);
				return;
			}
			const msg =
				`üì¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from.username || '–ë–µ–∑ –Ω–∏–∫–∞'} (${
					ctx.from.id
				}) –∑–∞–ø—Ä–æ—Å–∏–ª —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞.\n\n` +
				`üë∂ –ò–º—è —Ä–µ–±—ë–Ω–∫–∞: ${user.name || '‚Äî'}\n` +
				`üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${user.age || '‚Äî'}\n` +
				`üìä –¢–µ–∫—É—â–µ–µ: ${user.requestCount}/${REQUEST_LIMIT}`;

			await ctx.answerCbQuery('–ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å!', {
				show_alert: true,
			});
			const markup = Markup.inlineKeyboard([
				[
					Markup.button.callback('‚úÖ Approve', `admin_approve_${ctx.from.id}`),
					Markup.button.callback('‚ôæ Unlimit', `admin_unlimit_${ctx.from.id}`),
				],
				[
					Markup.button.callback('‚õîÔ∏è Limit', `admin_limit_${ctx.from.id}`),
					Markup.button.callback('‚ÑπÔ∏è Get Info', `admin_get_${ctx.from.id}`),
				],
			]);
			await ctx.telegram.sendMessage(ADMIN_ID, msg, {
				reply_markup: markup.reply_markup,
			});
			break;
		case 'buy_spin':
			await ctx.answerCbQuery();
			const paymentToken = PAYMENT_PROVIDER_TOKEN ?? null;
			const invoice = {
				title: '–û–¥–∏–Ω —Å–ø–∏–Ω',
				description: '–ó–∞–ø—É—Å–∫ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞',
				payload: 'spin_payload_' + ctx.from.id,
				provider_token: paymentToken,
				currency: 'XTR',
				prices: [{ label: '1 –º—É–ª—å—Ç—Ñ–∏–ª—å–º', amount: 5 }],
			};
			const invoiceLink = await ctx.telegram.createInvoiceLink(invoice);
			return ctx.replyWithInvoice(invoice, paymentKeyboard);
		case 'change_params':
			ctx.reply(
				`–û—Ç–ª–∏—á–Ω–æ, ${user.name}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤:\n\n` +
					`1Ô∏è‚É£ –ñ–∞–Ω—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ú—É–ª—å—Ç—Ñ–∏–ª—å–º)\n` +
					`2Ô∏è‚É£ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)\n` +
					`3Ô∏è‚É£ –ò—Å–∫–ª—é—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —è–ø–æ–Ω—Å–∫–∏–π)\n` +
					`4Ô∏è‚É£ –°—Ç—Ä–∞–Ω—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: UA, RU)\n`,
				Markup.inlineKeyboard([
					// [Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä', 'change_genre')],
					[Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥', 'change_rating')],
					[Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫–∏', 'change_languages')],
					[Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—ã', 'change_countries')],
				]),
			);
			break;
		default:
			console.warn(`–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query: ${data}`);
			ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.');
			break;
	}
});

bot.on('pre_checkout_query', async (ctx) => {
	// –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º true, —á—Ç–æ–±—ã Telegram –ø—Ä–æ–¥–æ–ª–∂–∏–ª –æ–ø–ª–∞—Ç—É
	await ctx.answerPreCheckoutQuery(true);
});

bot.on('successful_payment', async (ctx) => {
	const cartoon = await getRandomCartoon();
	// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	await ctx.replyWithPhoto(
		{ url: cartoon.imageUrl },
		{
			caption: `üéâ –°–ø–∞—Å–∏–±–æ! –í–æ—Ç –í–∞—à –Ω–æ–≤—ã–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º: *${cartoon.title}*`,
			parse_mode: 'Markdown',
			...Markup.inlineKeyboard([
				[
					Markup.button.callback(
						'‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
						`togglefav_${cartoon.id}`,
					),
				],
			]),
		},
	);
});

bot.catch((err, ctx) => {
	console.error(`–û—à–∏–±–∫–∞ –¥–ª—è @${ctx.from?.username || 'unknown user'}:`, err);
	ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

module.exports = bot;
