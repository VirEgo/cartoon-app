const { Telegraf, Markup } = require('telegraf');
const {
	TELEGRAM_BOT_TOKEN,
	ADMIN_ID,
	REQUEST_LIMIT,
	LIMIT_RESET_INTERVAL_MS,
} = require('./config/config');
const {
	findOrCreateUser,
	updateUser,
	resetRequestLimit,
	toggleUnlimitedAccess,
	getUserInfo,
	addLikedCartoon,
	addDislikedCartoon,
	toggleFavoriteCartoon,
	resetUserData,
} = require('./services/user');
const {
	fetchRandomCartoonImproved,
	getCartoonDetails,
	getPosterUrl,
} = require('./services/tmdb');

const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

const userActionTimestamps = new Map(); // –•—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function limitUserActions({
	generalLimitMs = 5 * 60 * 1000,
	cartoonLimitMs = 3000,
} = {}) {
	return async (ctx, next) => {
		const userId = ctx.from?.id;
		if (!userId) return next();

		const now = Date.now();
		const text = ctx.message?.text?.trim();
		const isCartoonRequest =
			text === 'üé≤ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º' ||
			text === '/random' ||
			ctx.callbackQuery?.data === 'random';

		const lastTimes = userActionTimestamps.get(userId) || {
			general: 0,
			cartoon: 0,
		};

		if (isCartoonRequest) {
			if (now - lastTimes.cartoon < cartoonLimitMs) {
				await ctx.reply('‚è≥ –ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–º.');
				return;
			}
			lastTimes.cartoon = now;
		} else {
			if (now - lastTimes.general < generalLimitMs) {
				await ctx.answerCbQuery?.('‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º.', {
					show_alert: false,
				});
				return;
			}
			lastTimes.general = now;
		}

		userActionTimestamps.set(userId, lastTimes);
		await next();
	};
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

bot.use(limitUserActions());
bot.use(async (ctx, next) => {
	const chatId = ctx.chat?.id || ctx.from?.id;
	const username = ctx.from?.username;
	if (chatId) {
		ctx.state.user = await findOrCreateUser(chatId, username);
	}
	console.log(
		`ü§ñ ${new Date().toISOString()} User ${chatId} (${
			username || 'no_username'
		}) - ${ctx.message?.text || ctx.callbackQuery?.data}`,
	);
	await next();
});

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns {object} - –û–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã Telegraf.
 */
function getMainKeyboard() {
	return Markup.keyboard([
		['üé≤ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º'],
		['‚ÑπÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ'],
		// ['‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –∏–º—è', 'üìÖ –°–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç'],
		// ['üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë'],
	]).resize();
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞.
 * @param {object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {object} cartoon - –û–±—ä–µ–∫—Ç –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞.
 * @returns {object} - –û–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã Telegraf.
 */
function generateCartoonButtons(user, cartoon) {
	const alreadyLiked = user.likedCartoonIds?.includes(cartoon.id);
	const alreadyInFav = user.favoriteCartoonIds?.includes(cartoon.id);
	const alreadyDisliked = user.dislikedCartoonIds?.includes(cartoon.id);

	const likeButton = alreadyLiked
		? Markup.button.callback('‚ù§Ô∏è –£–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', 'already_liked')
		: Markup.button.callback('‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è', `like_${cartoon.id}`);

	const dislikeButton = alreadyDisliked
		? Markup.button.callback('üëé –£–∂–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', 'already_disliked')
		: Markup.button.callback('üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', `dislike_${cartoon.id}`);

	const favButton = Markup.button.callback(
		alreadyInFav ? '‚≠ê –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
		`togglefav_${cartoon.id}`,
	);

	return Markup.inlineKeyboard([[likeButton, dislikeButton], [favButton]])
		.reply_markup;
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
bot.start(async (ctx) => {
	const user = ctx.state.user;

	if (!user.name || !user.age) {
		user.step = 'ask_name';
		await user.save();
		ctx.reply('–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —Ç–µ–±–µ –º—É–ª—å—Ç—Ñ–∏–ª—å–º.\n–ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞?');
		return;
	}

	user.step = 'done';
	await user.save();
	ctx.reply(
		`–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, ${user.name}! –ì–æ—Ç–æ–≤ –ø–æ–¥–æ–±—Ä–∞—Ç—å –º—É–ª—å—Ç—Ñ–∏–ª—å–º?`,
		getMainKeyboard(),
	);
});

// –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.command('approve', async (ctx) => {
	if (ctx.from.id !== ADMIN_ID) return;

	const args = ctx.message.text.split(' ');
	const targetId = parseInt(args[1]);
	if (isNaN(targetId))
		return ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

	const user = await resetRequestLimit(targetId);
	if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

	await ctx.reply(`‚úÖ –õ–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è ${targetId}`);
	await ctx.telegram.sendMessage(
		targetId,
		'üéâ –¢–≤–æ–π –ª–∏–º–∏—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ú–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –∏—Å–∫–∞—Ç—å –º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã!',
	);
});

bot.command('unlimit', async (ctx) => {
	if (ctx.from.id !== ADMIN_ID) return;

	const args = ctx.message.text.split(' ');
	const targetId = parseInt(args[1]);
	if (isNaN(targetId))
		return ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

	const user = await toggleUnlimitedAccess(targetId, true);
	if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

	await ctx.reply(`‚ôæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetId} —Ç–µ–ø–µ—Ä—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π.`);
	await ctx.telegram.sendMessage(
		targetId,
		'‚ú® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–ª —Ç–µ–±–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø!',
	);
});

bot.command('limit', async (ctx) => {
	if (ctx.from.id !== ADMIN_ID) return;

	const args = ctx.message.text.split(' ');
	const targetId = parseInt(args[1]);
	if (isNaN(targetId))
		return ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

	const user = await toggleUnlimitedAccess(targetId, false);
	if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

	await ctx.reply(`‚õîÔ∏è –£–±—Ä–∞–Ω –±–µ–∑–ª–∏–º–∏—Ç —É ${targetId}.`);
	await ctx.telegram.sendMessage(targetId, '‚õîÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á—ë–Ω.');
});

bot.command('get', async (ctx) => {
	if (ctx.from.id !== ADMIN_ID) return;

	const args = ctx.message.text.split(' ');
	const targetId = parseInt(args[1]);
	if (isNaN(targetId))
		return ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

	const user = await getUserInfo(targetId);
	if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

	await ctx.reply(
		`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${user.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${targetId})\n` +
			`–ò–º—è: ${user.name || '-'}\n–í–æ–∑—Ä–∞—Å—Ç: ${user.age || '-'}\n` +
			`–ó–∞–ø—Ä–æ—Å–æ–≤: ${user.requestCount}/${REQUEST_LIMIT}\n` +
			`–ë–µ–∑–ª–∏–º–∏—Ç: ${user.isUnlimited ? '–î–∞' : '–ù–µ—Ç'}`,
	);
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
bot.on('text', async (ctx) => {
	const user = ctx.state.user;
	const text = ctx.message.text;

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	switch (text) {
		case '‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –∏–º—è':
			user.step = 'ask_name';
			await user.save();
			ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:', Markup.removeKeyboard());
			return;
		case 'üìÖ –°–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç':
			user.step = 'ask_age';
			await user.save();
			ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:', Markup.removeKeyboard());
			return;
		case 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë':
			await resetUserData(user.telegramId);
			ctx.reply('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ –∑–æ–≤—É—Ç —Ä–µ–±—ë–Ω–∫–∞?');
			return;
		case '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
			if (!user.favoriteCartoonIds || user.favoriteCartoonIds.length === 0) {
				ctx.reply('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤.');
				return;
			}
			try {
				// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
				const details = await Promise.all(
					user.favoriteCartoonIds.map((id) => getCartoonDetails(id)),
				);

				const valid = details.filter(Boolean); // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
				if (!valid.length) {
					ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.');
					return;
				}

				// –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–µ—Ä–æ–≤
				const media = valid.slice(0, 10).map((c) => ({
					type: 'photo',
					media:
						getPosterUrl(c.poster_path) ||
						'https://placehold.co/500x750/000000/FFFFFF?text=No+Poster', // –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ—Å—Ç–µ—Ä–∞
					caption: `<b>${c.title}</b>\n\n${
						c.overview?.slice(0, 200) || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
					}...`, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
					parse_mode: 'HTML',
				}));

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
				try {
					await ctx.replyWithMediaGroup(media);
				} catch (e) {
					console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã:', e.message);
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É, –µ—Å–ª–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–æ—Ç–æ)
					for (const item of media) {
						await ctx.replyWithPhoto(item.media, {
							caption: item.caption,
							parse_mode: 'HTML',
						});
					}
				}
			} catch (e) {
				console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', e);
				ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.');
			}
			return;
		case '‚ÑπÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
			ctx.reply(
				`üë∂ –ò–º—è: ${user.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: ${
					user.age || '–Ω–µ —É–∫–∞–∑–∞–Ω'
				}`,
			);
			return;
		case 'üé≤ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º':
			if (user.step !== 'done') {
				ctx.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É. –í–≤–µ–¥–∏ /start.');
				return;
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
			if (!user.isUnlimited) {
				const now = new Date();
				const timeSinceLastReset = now - new Date(user.lastResetAt);

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 12 —á–∞—Å–æ–≤
				if (timeSinceLastReset > LIMIT_RESET_INTERVAL_MS) {
					user.requestCount = 0;
					user.lastResetAt = now;
					await user.save();
					await ctx.reply('üéâ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –ü–æ–∏—Å–∫ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.');
				}

				if (user.requestCount >= REQUEST_LIMIT) {
					const msLeft = LIMIT_RESET_INTERVAL_MS - timeSinceLastReset;
					const hours = Math.floor(msLeft / (1000 * 60 * 60));
					const minutes = Math.floor((msLeft % (1000 * 60 * 60)) / (1000 * 60));

					return ctx.reply(
						`‚è≥ –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç. –°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ ${hours}—á ${minutes}–º.`,
						Markup.inlineKeyboard([
							Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', 'check_limit'),
							Markup.button.callback(
								'üì© –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞',
								'request_more',
							),
						]),
					);
				}
			}

			// –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º
			try {
				// –í–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ä–µ–±–µ–Ω–∫–∞
				const searchAge = Math.min(user.age + 2, 12); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–∏—Å–∫–∞
				const cartoon = await fetchRandomCartoonImproved(
					searchAge,
					user.seenCartoonIds,
					user.dislikedCartoonIds,
				);

				if (!cartoon) {
					await ctx.reply(
						'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª–∏.',
					);
					return;
				}

				// –î–æ–±–∞–≤–ª—è–µ–º –º—É–ª—å—Ç—Ñ–∏–ª—å–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç)
				if (!user.seenCartoonIds.includes(cartoon.id)) {
					user.seenCartoonIds.push(cartoon.id);
					await user.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ seen
				}

				const photoUrl = getPosterUrl(cartoon.poster_path);
				const caption = `<b>${cartoon.title}</b>\n–†–µ–π—Ç–∏–Ω–≥: <i>${
					cartoon.vote_average?.toFixed(1) || '-'
				}</i>\n\n${
					cartoon.overview?.slice(0, 250) || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
				}...`;

				const replyMarkup = generateCartoonButtons(user, cartoon);
				if (photoUrl) {
					try {
						await ctx.replyWithPhoto(photoUrl, {
							caption,
							parse_mode: 'HTML',
							reply_markup: replyMarkup,
						});
					} catch (e) {
						console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', e.message);
						// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
						await ctx.reply(caption, {
							parse_mode: 'HTML',
							reply_markup: replyMarkup,
						});
					}
				} else {
					// –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–µ—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
					await ctx.reply(caption, {
						parse_mode: 'HTML',
						reply_markup: replyMarkup,
					});
				}

				// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±–µ–∑–ª–∏–º–∏—Ç)
				if (!user.isUnlimited) {
					user.requestCount++;
					await user.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
				}
			} catch (err) {
				console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞:', err);
				await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞.');
			}

			return;
		default:
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			if (user.step === 'ask_name') {
				user.name = text.trim(); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
				user.step = 'ask_age';
				await user.save();
				ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${user.name}! –°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ä–µ–±—ë–Ω–∫—É?`);
				return;
			}

			if (user.step === 'ask_age') {
				const age = parseInt(text.trim());
				if (isNaN(age) || age < 1 || age > 12) {
					ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 12.');
					return;
				}

				user.age = age;
				user.step = 'done';
				await user.save();

				await ctx.reply(
					`‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${age}\n\n‚¨áÔ∏è –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ:`,
					getMainKeyboard(),
				);
				return;
			}

			// –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ —à–∞–≥–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–ª–∞
			ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start.');
			break;
	}
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback query ---
bot.on('callback_query', async (ctx) => {
	const user = ctx.state.user;
	const data = ctx.callbackQuery.data;
	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
	await ctx.answerCbQuery();

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback query
	if (data.startsWith('admin_')) {
		if (ctx.from.id !== ADMIN_ID) {
			return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
		}

		const [_, action, targetIdStr] = data.split('_');
		const targetId = parseInt(targetIdStr);
		if (isNaN(targetId))
			return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

		const targetUser = await getUserInfo(targetId);
		if (!targetUser) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

		try {
			switch (action) {
				case 'approve':
					await resetRequestLimit(targetId);
					await ctx.editMessageText(`‚úÖ –õ–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è ${targetId}`);
					await ctx.telegram.sendMessage(
						targetId,
						'üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–∏–ª —Ç–≤–æ–π –ª–∏–º–∏—Ç. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!',
					);
					break;
				case 'unlimit':
					await toggleUnlimitedAccess(targetId, true);
					await ctx.reply(`‚ôæ –ë–µ–∑–ª–∏–º–∏—Ç –≤–∫–ª—é—á–µ–Ω –¥–ª—è ${targetId}`);
					await ctx.telegram.sendMessage(
						targetId,
						'‚ú® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–ª —Ç–µ–±–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø!',
					);
					break;
				case 'limit':
					await toggleUnlimitedAccess(targetId, false);
					await ctx.reply(`‚õîÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è ${targetId}`);
					await ctx.telegram.sendMessage(
						targetId,
						'‚õîÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á—ë–Ω.',
					);
					break;
				case 'get':
					await ctx.reply(
						`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${
							targetUser.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
						} (${targetId})\n` +
							`–ò–º—è: ${targetUser.name || '-'}\n–í–æ–∑—Ä–∞—Å—Ç: ${
								targetUser.age || '-'
							}\n` +
							`–ó–∞–ø—Ä–æ—Å–æ–≤: ${targetUser.requestCount}/${REQUEST_LIMIT}\n` +
							`–ë–µ–∑–ª–∏–º–∏—Ç: ${targetUser.isUnlimited ? '–î–∞' : '–ù–µ—Ç'}`,
					);
					break;
				default:
					ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞.');
			}
		} catch (error) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥–µ:', error);
			ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.');
		}
		return;
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –¥–ª—è –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤
	if (data.startsWith('like_')) {
		const id = parseInt(data.split('_')[1]);
		if (isNaN(id)) return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞.');

		const updatedUser = await addLikedCartoon(user.telegramId, id);
		if (updatedUser) {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º—É–ª—å—Ç—Ñ–∏–ª—å–º —É–∂–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è
			try {
				await ctx.editMessageReplyMarkup(
					generateCartoonButtons(updatedUser, { id }),
				);
			} catch (e) {
				console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ª–∞–π–∫–∞:', e.message);
				// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)
			}
		} else {
			// –ï—Å–ª–∏ updatedUser null, –∑–Ω–∞—á–∏—Ç –º—É–ª—å—Ç—Ñ–∏–ª—å–º —É–∂–µ –±—ã–ª –≤ likedCartoonIds
			ctx.reply('–£–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è!');
		}
		return;
	}

	if (data.startsWith('dislike_')) {
		const id = parseInt(data.split('_')[1]);
		if (isNaN(id)) return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞.');

		const updatedUser = await addDislikedCartoon(user.telegramId, id);
		if (updatedUser) {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
			try {
				await ctx.editMessageReplyMarkup(
					generateCartoonButtons(updatedUser, { id }),
				);
			} catch (e) {
				console.warn(
					'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –¥–∏–∑–ª–∞–π–∫–∞:',
					e.message,
				);
			}
		} else {
			ctx.reply('–£–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π.');
		}
		return;
	}

	if (data.startsWith('togglefav_')) {
		const id = parseInt(data.split('_')[1]);
		if (isNaN(id)) return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞.');

		const { user: updatedUser, added } = await toggleFavoriteCartoon(
			user.telegramId,
			id,
		);
		if (updatedUser) {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
			try {
				await ctx.editMessageReplyMarkup(
					generateCartoonButtons(updatedUser, { id }),
				);
			} catch (e) {
				console.warn(
					'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:',
					e.message,
				);
			}
			ctx.reply(
				added ? '‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!' : '‚≠ê –£–±—Ä–∞–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!',
			);
		} else {
			ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.');
		}
		return;
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback query
	switch (data) {
		case 'already_liked':
			ctx.reply('–§–∏–ª—å–º —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º ‚ù§Ô∏è');
			break;
		case 'already_disliked':
			ctx.reply('–§–∏–ª—å–º —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ üëé');
			break;
		case 'check_limit':
			const now = new Date();
			const timeSinceLastReset = now - new Date(user.lastResetAt);

			if (timeSinceLastReset > LIMIT_RESET_INTERVAL_MS) {
				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				await resetRequestLimit(user.telegramId);
				await ctx.editMessageText('üéâ –õ–∏–º–∏—Ç –æ–±–Ω—É–ª—ë–Ω! –ü–æ–∏—Å–∫ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.');
			} else {
				const msLeft = LIMIT_RESET_INTERVAL_MS - timeSinceLastReset;
				const hours = Math.floor(msLeft / (1000 * 60 * 60));
				const minutes = Math.floor((msLeft % (1000 * 60 * 60)) / (1000 * 60));

				const newText = `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å ${hours}—á ${minutes}–º`;

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
				if (ctx.callbackQuery.message?.text !== newText) {
					await ctx.editMessageText(newText, {
						reply_markup: Markup.inlineKeyboard([
							[Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', 'check_limit')],
							[
								Markup.button.callback(
									'üì© –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞',
									'request_more',
								),
							],
						]),
					});
				} else {
					// –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
					// ctx.answerCbQuery('‚è≥ –í—Ä–µ–º—è –µ—â—ë –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å'); // –£–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ
				}
			}
			break;
		case 'request_more':
			if (isNaN(ADMIN_ID)) {
				ctx.reply(
					'–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ADMIN_ID).',
				);
				return;
			}
			const msg =
				`üì¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from.username || '–ë–µ–∑ –Ω–∏–∫–∞'} (${
					ctx.from.id
				}) –∑–∞–ø—Ä–æ—Å–∏–ª —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞.\n\n` +
				`üë∂ –ò–º—è —Ä–µ–±—ë–Ω–∫–∞: ${user.name || '‚Äî'}\n` +
				`üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${user.age || '‚Äî'}\n` +
				`üìä –¢–µ–∫—É—â–µ–µ: ${user.requestCount}/${REQUEST_LIMIT}`;

			await ctx.answerCbQuery('–ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å!', {
				show_alert: true,
			});
			const markup = Markup.inlineKeyboard([
				[
					Markup.button.callback('‚úÖ Approve', `admin_approve_${ctx.from.id}`),
					Markup.button.callback('‚ôæ Unlimit', `admin_unlimit_${ctx.from.id}`),
				],
				[
					Markup.button.callback('‚õîÔ∏è Limit', `admin_limit_${ctx.from.id}`),
					Markup.button.callback('‚ÑπÔ∏è Get Info', `admin_get_${ctx.from.id}`),
				],
			]);
			await ctx.telegram.sendMessage(ADMIN_ID, msg, {
				reply_markup: markup.reply_markup,
			});
			break;
		default:
			// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query
			console.warn(`‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query: ${data}`);
			// –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
			// ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.');
			break;
	}
});

bot.catch((err, ctx) => {
	console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è @${ctx.from?.username || 'unknown user'}:`, err);
	ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

module.exports = bot;
