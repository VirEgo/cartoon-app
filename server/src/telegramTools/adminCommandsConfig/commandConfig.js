const { ADMIN_ID } = require('../../config/config');

function initializeAdminCommands(bot) {
	const ctx = bot.context;
	if (ctx?.from?.id !== ADMIN_ID) return;

	bot.command('approve', async (ctx) => {
		const args = ctx.message.text.split(' ');
		const targetId = parseInt(args[1]);
		if (isNaN(targetId))
			return ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

		const user = await resetRequestLimit(targetId);
		if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

		await ctx.reply(`–õ–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è ${targetId}`);
		await ctx.telegram.sendMessage(
			targetId,
			'üéâ –¢–≤–æ–π –ª–∏–º–∏—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ú–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –∏—Å–∫–∞—Ç—å –º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã!',
		);
	});

	bot.command('unlimit', async (ctx) => {
		const args = ctx.message.text.split(' ');
		const targetId = parseInt(args[1]);
		if (isNaN(targetId))
			return ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

		const user = await toggleUnlimitedAccess(targetId, true);
		if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

		await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetId} —Ç–µ–ø–µ—Ä—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π.`);
		await ctx.telegram.sendMessage(
			targetId,
			'‚ú® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–ª —Ç–µ–±–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø!',
		);
	});

	bot.command('limit', async (ctx) => {
		const args = ctx.message.text.split(' ');
		const targetId = parseInt(args[1]);
		if (isNaN(targetId))
			return ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

		const user = await toggleUnlimitedAccess(targetId, false);
		if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

		await ctx.reply(` –£–±—Ä–∞–Ω –±–µ–∑–ª–∏–º–∏—Ç —É ${targetId}.`);
		await ctx.telegram.sendMessage(targetId, '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á—ë–Ω.');
	});

	bot.command('get', async (ctx) => {
		const args = ctx.message.text.split(' ');
		const targetId = parseInt(args[1]);
		if (isNaN(targetId))
			return ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

		const user = await getUserInfo(targetId);
		if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

		await ctx.reply(
			`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${user.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${targetId})\n` +
				`–ò–º—è: ${user.name || '-'}\n–í–æ–∑—Ä–∞—Å—Ç: ${user.age || '-'}\n` +
				`–ó–∞–ø—Ä–æ—Å–æ–≤: ${user.requestCount}/${REQUEST_LIMIT}\n` +
				`–ë–µ–∑–ª–∏–º–∏—Ç: ${user.isUnlimited ? '–î–∞' : '–ù–µ—Ç'}`,
		);
	});
}

async function initializeAdminCallbacks(bot) {
	const ctx = bot.context;
	if (!ctx || ctx?.from?.id !== ADMIN_ID) return;
	const data = ctx.callbackQuery.data;

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –¥–ª—è –∞–¥–º–∏–Ω–∞
	if (data.startsWith('admin_')) {
		if (!ctx || ctx?.from?.id !== ADMIN_ID) {
			return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
		}

		const [_, action, targetIdStr] = data.split('_');
		const targetId = parseInt(targetIdStr);
		if (isNaN(targetId))
			return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

		const targetUser = await getUserInfo(targetId);
		if (!targetUser) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

		try {
			switch (action) {
				case 'approve':
					await resetRequestLimit(targetId);
					await ctx.editMessageText(`–õ–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è ${targetId}`);
					await ctx.telegram.sendMessage(
						targetId,
						'üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–∏–ª —Ç–≤–æ–π –ª–∏–º–∏—Ç. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!',
					);
					break;
				case 'unlimit':
					await toggleUnlimitedAccess(targetId, true);
					await ctx.reply(`–ë–µ–∑–ª–∏–º–∏—Ç –≤–∫–ª—é—á–µ–Ω –¥–ª—è ${targetId}`);
					await ctx.telegram.sendMessage(
						targetId,
						'‚ú® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–ª —Ç–µ–±–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø!',
					);
					break;
				case 'limit':
					await toggleUnlimitedAccess(targetId, false);
					await ctx.reply(`–ë–µ–∑–ª–∏–º–∏—Ç –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è ${targetId}`);
					await ctx.telegram.sendMessage(
						targetId,
						'–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á—ë–Ω.',
					);
					break;
				case 'get':
					await ctx.reply(
						`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${
							targetUser.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
						} (${targetId})\n` +
							`–ò–º—è: ${targetUser.name || '-'}\n–í–æ–∑—Ä–∞—Å—Ç: ${
								targetUser.age || '-'
							}\n` +
							`–ó–∞–ø—Ä–æ—Å–æ–≤: ${targetUser.requestCount}/${REQUEST_LIMIT}\n` +
							`–ë–µ–∑–ª–∏–º–∏—Ç: ${targetUser.isUnlimited ? '–î–∞' : '–ù–µ—Ç'}`,
					);
					break;
				default:
					ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞.');
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥–µ:', error);
			ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.');
		}
		return;
	}
}

module.exports = { initializeAdminCommands, initializeAdminCallbacks };
